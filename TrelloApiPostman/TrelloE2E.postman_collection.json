{
	"info": {
		"_postman_id": "d079f60d-2ec6-4edc-a728-bf8d5427e134",
		"name": "Trello E2E",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24213863"
	},
	"item": [
		{
			"name": "Create a board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"BoardId\", response.id); \r",
							" \r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The board name is a string\", () => {\r",
							"        pm.expect(response.name).to.be.a(\"string\")\r",
							"})\r",
							"\r",
							"pm.test(\"The board name is uniqe\", () => {\r",
							"        pm.expect(response.name).to.eql(pm.environment.get(\"boardName\"))\r",
							"})\r",
							"\r",
							"pm.test(\"The board name is shorter than 16384 charakters\", () => {\r",
							"        pm.expect(response.name.length).is.below(16384)\r",
							"})\r",
							"\r",
							"pm.test(\"The board should be private\", () => {\r",
							"    pm.expect(response.prefs.permissionLevel).to.eql(\"private\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let currentBoardNumber = pm.environment.get(\"currentBoardNumber\")\r",
							"\r",
							"if (currentBoardNumber) {\r",
							"    currentBoardNumber++;\r",
							"} else {\r",
							"    currentBoardNumber = 1;\r",
							"}\r",
							"\r",
							"let boardName = \"My new Board \" + currentBoardNumber\r",
							"\r",
							"pm.environment.set(\"boardName\", boardName);\r",
							"\r",
							"pm.environment.set(\"currentBoardNumber\", currentBoardNumber);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.trello.com/1/boards/?name={{boardName}}&key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{boardName}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create  TODO list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json()\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The list is named TODO\", () => {\r",
							"    pm.expect(response.name).to.eql(\"TODO\");\r",
							"});\r",
							"\r",
							"pm.test(\"The list is not closed\", () => {\r",
							"       pm.expect(response.closed).to.eql(false);\r",
							"});\r",
							"\r",
							"pm.test(\"The list is inside the board\", function () {\r",
							"    pm.expect(response.idBoard).to.eql(pm.environment.get(\"BoardId\"));\r",
							"});\r",
							"\r",
							"pm.environment.set(\"TodoId\", response.id);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/lists?name=TODO&key={{trelloKey}}&token={{trelloToken}}&idBoard={{BoardId}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "TODO"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "idBoard",
							"value": "{{BoardId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create DONE list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json()\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The list id named DONE\", () => {\r",
							"    pm.expect(response.name).to.eql(\"DONE\");\r",
							"});\r",
							"\r",
							"pm.test(\"The list is not closed\", () => {\r",
							"       pm.expect(response.closed).to.eql(false);\r",
							"});\r",
							"\r",
							"pm.test(\"The list is inside the board\", function () {\r",
							"    pm.expect(response.idBoard).to.eql(pm.environment.get(\"BoardId\"));\r",
							"});\r",
							"\r",
							"pm.environment.set(\"DoneId\", response.id);\r",
							" \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/lists?name=DONE&key={{trelloKey}}&token={{trelloToken}}&idBoard={{BoardId}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "DONE"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "idBoard",
							"value": "{{BoardId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a card in TODO list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The card has name\", () => {\r",
							"       pm.expect(response.name).to.eql(\"Have a nice day!\");\r",
							"});\r",
							"\r",
							"pm.test(\"The card is not closed\", () => {\r",
							"       pm.expect(response.closed).to.eql(false);\r",
							"});\r",
							"\r",
							"pm.test(\"The card is into the board\",() => {\r",
							"    pm.expect(response.idBoard).to.eql(pm.environment.get(\"BoardId\"))\r",
							"});\r",
							"pm.test(\"The card is into TODO list\",() => {\r",
							"      pm.expect(response.idList).to.eql(pm.environment.get(\"TodoId\"))\r",
							"});\r",
							"pm.test(\"The card has no votes\",() => {\r",
							"        pm.expect(response.badges.votes).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(\"The card has no attachment\",() => {\r",
							"    pm.expect(response.badges.attachments).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"CardName\", \"Learn Postman\");\r",
							"\r",
							"pm.environment.set(\"CardId\", response.id);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/cards?name=Have a nice day!&key={{trelloKey}}&token={{trelloToken}}&idList={{TodoId}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"cards"
					],
					"query": [
						{
							"key": "name",
							"value": "Have a nice day!"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "idList",
							"value": "{{TodoId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Move the card to DONE list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json ()\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The card name is not changed\", () => {\r",
							"    pm.expect(response.name).to.eql(pm.environment.get(\"CardName\"))\r",
							"});\r",
							"\r",
							"pm.test(\"The card is not closed\", () => {\r",
							"     pm.expect(response.closed).to.eql(false);\r",
							"});\r",
							"\r",
							"pm.test(\"The card is inside the same board\", () => {\r",
							"   pm.expect(response.idBoard).to.eql(pm.environment.get(\"BoardId\"))\r",
							"});\r",
							"\r",
							"pm.test(\"The card is inside DONE list\",() => {\r",
							"      pm.expect(response.idList).to.eql(pm.environment.get(\"DoneId\"))\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/cards/{{CardId}}/?name={{CardName}}&key={{trelloKey}}&token={{trelloToken}}&idList={{DoneId}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"cards",
						"{{CardId}}",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{CardName}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "idList",
							"value": "{{DoneId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete the board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let response = pm.response.json()\r",
							"\r",
							"pm.test(\"The board is deleted\", () => {\r",
							"    pm.expect(response._value).to.be.eql(null)\r",
							"\r",
							"})\r",
							"\r",
							"console.log(response)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.trello.com/1/boards/{{BoardId}}?key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						"{{BoardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get the board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"The board is not exist\", function () {\r",
							"    pm.response.to.have.status(\"Not Found\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/boards/{{BoardId}}?key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						"{{BoardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "key",
			"value": "",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		}
	]
}